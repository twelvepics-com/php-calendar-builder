<?php

/*
 * This file is part of the twelvepics-com/php-calendar-builder project.
 *
 * (c) Björn Hempel <https://www.hempel.li/>
 *
 * For the full copyright and license information, please view the LICENSE.md
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace App\Command\Calendar;

use App\Calendar\ImageBuilder\Base\BaseImageBuilder;
use App\Calendar\ImageBuilder\ImageBuilderFactory;
use App\Constants\KeyJson;
use App\Constants\Parameter\Argument;
use App\Constants\Parameter\Option;
use App\Objects\Image\Image;
use App\Objects\Image\ImageContainer;
use App\Objects\Parameter\ParameterWrapper;
use App\Objects\Parameter\Target;
use App\Service\CalendarBuilderService;
use Exception;
use Ixnode\PhpContainer\Json;
use Ixnode\PhpException\ArrayType\ArrayKeyNotFoundException;
use Ixnode\PhpException\Case\CaseInvalidException;
use Ixnode\PhpException\Case\CaseUnsupportedException;
use Ixnode\PhpException\File\FileNotFoundException;
use Ixnode\PhpException\File\FileNotReadableException;
use Ixnode\PhpException\Function\FunctionJsonEncodeException;
use Ixnode\PhpException\Parser\ParserException;
use Ixnode\PhpException\Type\TypeInvalidException;
use JsonException;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\DependencyInjection\Attribute\Autowire;

/**
 * Class PageBuildCommand
 *
 * @author Björn Hempel <bjoern@hempel.li>
 * @version 0.1.0 (2023-11-06)
 * @since 0.1.0 (2023-11-06) First version.
 * @example bin/console calendar:page-build data/calendar/bcb37ef651a1814c091c8a24d8f550ee/DSC03740.png --year 2024 --month 1 --page-title 'Scotland, Edinburgh' --title Edinburgh --subtitle 'With love' --coordinate '55.948815, -3.193105'
 */
#[AsCommand(
    name: self::COMMAND_NAME,
    description: self::COMMAND_DESCRIPTION
)]
class PageBuildCommand extends Command
{
    final public const COMMAND_NAME = 'calendar:page-build';

    final public const COMMAND_DESCRIPTION = 'Builds a calendar page';

    private const GENERATED_BY_CONFIG = 'No path. Image generated by configuration.';

    private const NOT_GIVEN = 'n/a';

    private const CONFIG_INDENTATION = 20;

    private OutputInterface $output;

    private InputInterface $input;

    /**
     * CreatePageCommand constructor
     *
     * @param CalendarBuilderService $calendarBuilderService
     * @param ParameterWrapper $parameterWrapper
     * @param string $projectDir
     */
    public function __construct(
        private readonly CalendarBuilderService $calendarBuilderService,
        private readonly ParameterWrapper $parameterWrapper,
        #[Autowire('%kernel.project_dir%')]
        private readonly string $projectDir
    )
    {
        parent::__construct();
    }

    /**
     * Configures the command.
     */
    protected function configure(): void
    {
        $this
            ->addOption(Option::SHOW_INFO, 'i', InputOption::VALUE_NEGATABLE, 'Only show info', false)

            ->addOption(Option::YEAR, null, InputOption::VALUE_REQUIRED, 'The year with which the page will be created.', date('Y'))
            ->addOption(Option::MONTH, null, InputOption::VALUE_REQUIRED, 'The month with which the page will be created.', date('m'))

            ->addOption(Option::PAGE_TITLE, null, InputOption::VALUE_REQUIRED, 'The page title of the page.', Target::DEFAULT_PAGE_TITLE)
            ->addOption(Option::TITLE, null, InputOption::VALUE_REQUIRED, 'The title of the page.', Target::DEFAULT_TITLE)
            ->addOption(Option::SUBTITLE, null, InputOption::VALUE_REQUIRED, 'The subtitle of the page.', Target::DEFAULT_SUBTITLE)
            ->addOption(Option::LOGO, null, InputOption::VALUE_REQUIRED, 'The logo of the page.', Target::DEFAULT_LOGO)
            ->addOption(Option::URL, null, InputOption::VALUE_REQUIRED, 'The url of the page.', Target::DEFAULT_SUBTITLE)
            ->addOption(Option::COORDINATE, null, InputOption::VALUE_REQUIRED, 'The position/coordinate of the picture.', Target::DEFAULT_COORDINATE)

            ->addOption(Option::OUTPUT_FORMAT, null, InputOption::VALUE_REQUIRED, 'The output format.', Target::DEFAULT_OUTPUT_FORMAT)
            ->addOption(Option::OUTPUT_QUALITY, null, InputOption::VALUE_REQUIRED, 'The output quality.', Target::DEFAULT_OUTPUT_QUALITY)

            ->addArgument(Argument::SOURCE, InputArgument::REQUIRED, 'The path to the source image.')
            ->setHelp(
                <<<'EOT'
The <info>calendar:page-build</info> creates a calendar page:
  <info>php %command.full_name%</info>
Creates a calendar page.
EOT
            );
    }

    /**
     * Formats the given text with indentation.
     *
     * @param string $text
     * @param int $indentation
     * @return string
     */
    private function formatTextWithIndentation(string $text, int $indentation): string
    {
        $lines = explode(PHP_EOL, $text);

        /* Keep the first line without indentation. */
        $formattedText = array_shift($lines);

        /* Add indentation before each remaining line. */
        foreach ($lines as $line) {
            $formattedText .= PHP_EOL.str_repeat(' ', $indentation) . $line;
        }

        return $formattedText;
    }

    /**
     * Prints the parameter to screen.
     *
     * @param BaseImageBuilder $imageBuilder
     * @return void
     * @throws ArrayKeyNotFoundException
     * @throws CaseInvalidException
     * @throws CaseUnsupportedException
     * @throws FileNotFoundException
     * @throws FileNotReadableException
     * @throws FunctionJsonEncodeException
     * @throws JsonException
     * @throws TypeInvalidException
     */
    private function printParameter(BaseImageBuilder $imageBuilder): void
    {
        $source = $this->parameterWrapper->getSource();
        $target = $this->parameterWrapper->getTarget();

        $config = $this->parameterWrapper->getConfig();

        $this->output->writeln('');
        $this->output->writeln([
            '  ============',
            '  Page Creator',
            '  ============',
        ]);
        $this->output->writeln('');
        $this->output->writeln(sprintf('  Title:            %s', $config->hasKey(KeyJson::TITLE) ? $config->getKeyString(KeyJson::TITLE) : self::NOT_GIVEN));
        $this->output->writeln('');
        $this->output->writeln('');

        $this->output->writeln('  A) Source (Input image)');
        $this->output->writeln('  =======================');
        $this->output->writeln('');
        $this->output->writeln(sprintf('  Image:            %s', $this->formatTextWithIndentation($source->getCliImage()->getAsciiString(), self::CONFIG_INDENTATION)));
        $this->output->writeln('');
        $this->output->writeln(sprintf('  Path:             %s', $source->getImageHolder()->getPath()?->getPath() ?? self::GENERATED_BY_CONFIG));
        $this->output->writeln(sprintf('  Coordinate:       %s', $source->getImageHolder()->getCoordinate()?->getStringDMS() ?? self::NOT_GIVEN));
        $this->output->writeln('');
        $this->output->writeln('');

        $this->output->writeln('  B) Output/Target');
        $this->output->writeln('  ================');
        $this->output->writeln('');
        $this->output->writeln(sprintf('  Year:             %s', $target->getYear()));
        $this->output->writeln(sprintf('  Month:            %s', $target->getMonth()));
        $this->output->writeln('');
        $this->output->writeln(sprintf('  Path:             %s', $target->getPath()->getPath()));
        $this->output->writeln(sprintf('  Format:           %s', $target->getOutputFormat()));
        $this->output->writeln(sprintf('  Quality:          %s', $target->getOutputQuality()));
        $this->output->writeln('');
        $this->output->writeln(sprintf('  Title:            %s', $target->getTitle() ?? 'n/a'));
        $this->output->writeln(sprintf('  Subtitle:         %s', $target->getSubtitle() ?? 'n/a'));
        $this->output->writeln(sprintf('  Page-Title:       %s', $target->getPageTitle()));
        $this->output->writeln(sprintf('  URL:              %s', $target->getUrl()));
        $this->output->writeln(sprintf('  Coordinate:       %s', $this->parameterWrapper->getCoordinateString()));
        $this->output->writeln('');
        $this->output->writeln('');

        $this->output->writeln('  C) Design');
        $this->output->writeln('  =========');
        $this->output->writeln('');
        $this->output->writeln(sprintf('  Design:           %s', $imageBuilder->getDesign()::class));
        $this->output->writeln(sprintf('  Config:           %s', $this->formatTextWithIndentation($imageBuilder->getDesign()->getConfig()->getJsonStringFormatted(), self::CONFIG_INDENTATION)));
        $this->output->writeln('');
        $this->output->writeln('');
    }

    /**
     * Prints the wait screen to screen.
     *
     * @return void
     */
    private function printWaitScreen(): void
    {
        $this->output->writeln('');
        $this->output->write(sprintf('Create calendar at %s. Please wait.. ', date('Y-m-d H:i:s')));
        $this->output->writeln('');
    }

    /**
     * Prints the build information.
     *
     * @param ImageContainer $buildInformation
     * @param float $timeTaken
     * @return void
     * @throws Exception
     */
    private function printBuildInformation(ImageContainer $buildInformation, float $timeTaken): void
    {
        $this->output->writeln('');
        $this->output->writeln(sprintf('→ Time taken: %.2fs', $timeTaken));

        $source = $buildInformation->getSource();
        $target = $buildInformation->getTarget();

        /** @var Image $image */
        foreach ([$source, $target] as $image) {
            $caption = $image->getType() === ImageContainer::TYPE_SOURCE ?
                'Calendar page built from:' :
                'Calendar page written to:';

            $this->output->writeln('');
            $this->output->writeln($caption);
            $this->output->writeln(sprintf('→ Path:      %s', $image->getPathRelative() ?? self::GENERATED_BY_CONFIG));
            $this->output->writeln(sprintf('→ Mime:      %s', $image->getMimeType()));
            $this->output->writeln(sprintf('→ Size:      %s (%d Bytes)', $image->getSizeHuman(), $image->getSizeByte()));
            $this->output->writeln(sprintf('→ Dimension: %dx%d', $image->getWidth(), $image->getHeight()));
        }

        $this->output->writeln('');
    }

    /**
     * Adds the configuration and reads the parameters.
     *
     * @return void
     * @throws ArrayKeyNotFoundException
     * @throws CaseInvalidException
     * @throws CaseUnsupportedException
     * @throws FileNotFoundException
     * @throws FileNotReadableException
     * @throws FunctionJsonEncodeException
     * @throws JsonException
     * @throws TypeInvalidException
     * @throws ParserException
     */
    private function init(): void
    {
        /* Initialize the parameter wrapper. */
        $this->parameterWrapper->init($this->input);

        /* Read arguments (Source). */
        $this->parameterWrapper->getSource()->readParameter($this->input);

        /* Read arguments (Target). */
        $this->parameterWrapper->getTarget()->readParameter($this->input);
    }

    /**
     * Returns the image configuration.
     *
     * @return Json
     * @throws ArrayKeyNotFoundException
     * @throws CaseInvalidException
     * @throws FileNotFoundException
     * @throws FileNotReadableException
     * @throws FunctionJsonEncodeException
     * @throws JsonException
     * @throws TypeInvalidException
     */
    private function getDesignConfig(): Json
    {
        /* TODO: Get config via pages if given */
        return $this->parameterWrapper->getConfig()->getKeyJson(['settings', 'defaults', 'design']);
    }



    /**
     * Execute the commands.
     *
     * @param InputInterface $input
     * @param OutputInterface $output
     * @return int
     * @throws Exception
     */
    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $this->output = $output;
        $this->input = $input;

        /* Add the configuration and read the parameters. */
        $this->init();

        /* Get image builder. */
        $imageBuilder = (new ImageBuilderFactory($this->projectDir))->getImageBuilder($input, $this->getDesignConfig());

        /* Print details */
        $this->printParameter($imageBuilder);

        $showInfo = (bool) $input->getOption(Option::SHOW_INFO);

        if ($showInfo) {
            $this->output->writeln('');
            return Command::SUCCESS;
        }

        /* Print wait screen */
        $this->printWaitScreen();

        /* Initialize calendar image */
        $this->calendarBuilderService->init(
            parameterWrapper: $this->parameterWrapper,
            imageBuilder: $imageBuilder
        );

        /* Create calendar image */
        $timeStart = microtime(true);
        $this->printBuildInformation(
            $this->calendarBuilderService->build(true),
            microtime(true) - $timeStart
        );

        return Command::SUCCESS;
    }
}
